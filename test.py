import unittestimport datetimeimport osfrom make_test_model import MakeTestsModulefile_maker = MakeTestsModule()# CURRENT_TIME = datetime.datetime(2025, 1, 1, 0, 0, 1)OUTPUTPATH = os.path.join(".", os.path.splitext(os.path.basename(__file__))[0])# exec(open("cp_log_export.py").read(), globals())class TestStringMethods(unittest.TestCase):    def test_status_running(self):        # Arrange        file_maker.make_test_status_running_file()        with open('./test_status_running_file.txt', 'r') as f:            test_input = f.read()        with open('./test_status_running_output_file.txt', 'r') as f:            expected_output = f.read()        # Act        with open('./cp_log_export_output.txt', 'w') as f:            f.write(test_input)        exec(open("cp_log_export.py").read(), globals())        # Assert        with open(os.path.join(OUTPUTPATH, 'output.txt'), "r") as f:            test_output = f.read()        self.assertEqual(test_output, expected_output)    def test_status_not_running(self):        # Arrange        file_maker.make_test_status_not_running_file()        with open('./test_status_not_running_file.txt', 'r') as f:            test_input = f.read()        with open('./test_status_not_running_output_file.txt', 'r') as f:            expected_output = f.read()        # Act        with open('./cp_log_export_output.txt', 'w') as f:            f.write(test_input)        exec(open("cp_log_export.py").read(), globals())        # Assert        with open(os.path.join(OUTPUTPATH, 'output.txt'), "r") as f:            test_output = f.read()        self.assertEqual(test_output, expected_output)    def test_time_exceed(self):        # Arrange        file_maker = MakeTestsModule()        file_maker.make_test_time_exceed_file()        with open('./test_time_exceed_file.txt', 'r') as f:            test_input = f.read()        with open('./test_time_exceed_output_file.txt', 'r') as f:            expected_output = f.read()        # Act        with open('./cp_log_export_output.txt', 'w') as f:            f.write(test_input)       # globals()['CURRENT_TIME'] = datetime.datetime(2025, 1, 1, 0, 0, 1)        b = globals() | {'CURRENT_TIME': datetime.datetime(            2025, 1, 1, 0, 0, 1)}        exec(open("cp_log_export.py").read(), b)        # Assert        with open(os.path.join(OUTPUTPATH, 'output.txt'), "r") as f:            test_output = f.read()        self.assertEqual(test_output, expected_output)    # def test_time_through_year(self):    #     CURRENT_TIME = datetime.datetime(2025, 1, 1, 0, 0, 1)    #     test_input = 'name: Server1 \n      status: Running (15538)\n      last log read at: 31 Dec  23:59:59\n      debug file: /opt/CPmds-R81.10/customers/fwmgr/CPrt-R81.10/log_exporter/targets/'    #     # Act    #     with open('./cp_log_export_output.txt', 'w') as f:    #         f.write(test_input)    #     exec(open("cp_log_export.py").read(), globals())    #     # Assert    #     with open(os.path.join(OUTPUTPATH, 'output.txt'), "r") as f:    #         test_output = f.read()    #     expected_output = 'Server1 is ok'    #     self.assertEqual(test_output, expected_output)# if __name__ == '__main__':#     unittest.main()a = TestStringMethods()a.test_time_exceed()